generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HairSalon {
  id          String      @id @default(cuid())
  name        String
  mainImage   String?
  images      String[]
  description String?
  openingTime DateTime?
  closingTime DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  slug        String      @unique
  priceRange  PRICERANGE?
  locationId  String?     @unique
  phoneNumber String?
  email       String      @unique
  ownerId     String
  location    Location?   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  owner       Owner       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  queues      Queue[]
  reviews     Review[]
  services    Service[]
  stylists    Stylist[]
}

model Owner {
  id          String       @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String       @unique
  userId      String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  role        USERCATEGORY @default(OWNER)
  phoneNumber String?
  hairSalon   HairSalon[]
}

model Stylist {
  id          String       @id @default(cuid())
  firstName   String?
  lastName    String?
  phoneNumber String?
  email       String?      @unique
  images      String[]
  mainImage   String?
  hairSalonId String
  userId      String?      @unique
  role        USERCATEGORY @default(STYLIST)
  queues      Queue[]
  hairSalon   HairSalon    @relation(fields: [hairSalonId], references: [id], onDelete: Cascade)
}

model Customer {
  id          String       @id @default(cuid())
  firstName   String
  lastName    String?
  phoneNumber String
  email       String       @unique
  city        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  userId      String?      @unique
  role        USERCATEGORY @default(CUSTOMER)
  queueId     String?
  Queue       Queue?       @relation(fields: [queueId], references: [id])
  reviews     Review[]
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       String
  hairSalonId String
  duration    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hairSalon   HairSalon @relation(fields: [hairSalonId], references: [id], onDelete: Cascade)
}

model Location {
  id        String     @id @default(cuid())
  city      String
  country   String
  address   String
  zipCode   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  hairSalon HairSalon?
}

model Review {
  id          String    @id @default(cuid())
  hairSalonId String
  customerId  String
  rating      Float
  comment     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  hairSalon   HairSalon @relation(fields: [hairSalonId], references: [id], onDelete: Cascade)
}

model Queue {
  id          String     @id @default(cuid())
  hairSalonId String
  stylistId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Customer    Customer[]
  hairSalon   HairSalon  @relation(fields: [hairSalonId], references: [id], onDelete: Cascade)
  stylist     Stylist    @relation(fields: [stylistId], references: [id], onDelete: Cascade)
}

enum PRICERANGE {
  EXPENSIVE
  MEDIUM
  CHEAP
}

enum USERCATEGORY {
  CUSTOMER
  OWNER
  STYLIST
}

enum QUEUESTATUS {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELED
}
