// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HairSalon {
  id          String        @id @default(cuid())
  name        String
  mainImage   String
  images      String[]
  description String
  openingTime DateTime
  closingTime DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  slug        String     @unique
  priceRange  PRICERANGE
  services    Service[]
  firstName   String
  lastName    String
  email       String     @unique
  userId      String?
  locationId  Int?         @unique
  location    Location?   @relation(fields: [locationId], references: [id])
  phoneNumber String?
  stylists    Stylist[]
  reviews     Review[]
  queues       Queue[]
  ownerId     String?
  owner       Owner?    @relation(fields: [ownerId], references: [id])
}
model Owner {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String  @unique
  userId    String?
  phoneNumber String?
  role      USERCATEGORY @default(OWNER)
  hairSalon HairSalon[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Stylist {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  phoneNumber  String?
  email        String?       @unique
  role         USERCATEGORY  @default(STYLIST)
  userId       String?
  images       String[]
  mainImage    String?
  hairSalonId  String
  hairSalon    HairSalon     @relation(fields: [hairSalonId], references: [id])
  // appointments Appointment[]
  queues       Queue[]
}
model Customer {
  id           String           @id @default(cuid())
  firstName    String
  lastName     String
  phoneNumber  String
  email        String        @unique
  userId       String? 
  role         USERCATEGORY  @default(CUSTOMER)
  // appointments Appointment[]
  city         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  reviews      Review[]
  queues       Queue[]
}
model Service {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  price        String
  hairSalonId  String
  hairSalon    HairSalon     @relation(fields: [hairSalonId], references: [id])
  duration     Int
  // appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Location {
  id        Int        @id @default(autoincrement())
  city      String
  country   String
  address   String
  zipCode   String
  hairSalon HairSalon?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// model Appointment {
//   id         Int      @id @default(autoincrement())
//   date       DateTime
//   customerId String
//   customer   Customer @relation(fields: [customerId], references: [id])
//   stylistId  Int
//   stylist    Stylist  @relation(fields: [stylistId], references: [id])
//   serviceId  Int
//   service    Service  @relation(fields: [serviceId], references: [id])
// }




model Review {
  id          Int       @id @default(autoincrement())
  hairSalon   HairSalon @relation(fields: [hairSalonId], references: [id])
  hairSalonId String
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String
  rating      Float
  comment     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Queue {
  id           Int      @id @default(autoincrement())
  hairSalonId  String
  hairSalon    HairSalon @relation(fields: [hairSalonId], references: [id])
  customerId   String
  customer     Customer  @relation(fields: [customerId], references: [id])
  stylistId    Int
  stylist      Stylist   @relation(fields: [stylistId], references: [id])
  position     Int   @default(autoincrement())    
  status       QUEUESTATUS
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
enum PRICERANGE {
  EXPENSIVE
  MEDIUM
  CHEAP
}
enum USERCATEGORY {
  CUSTOMER
  OWNER
  STYLIST 
}

enum QUEUESTATUS {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELED
}